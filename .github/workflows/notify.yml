name: Events Update to Tg

on:
  push:
  pull_request:
  issues:
  issue_comment:
  release:
  create:
  delete:
  discussion_comment:
  workflow_dispatch:
  repository_dispatch:
  fork:
  watch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram Notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          escape_md2() {
            echo "$1" | sed \
              -e 's/\\/\\\\/g' \
              -e 's/_/\\_/g' \
              -e 's/\*/\\*/g' \
              -e 's/\[/\\[/g' \
              -e 's/\]/\\]/g' \
              -e 's/(/\\(/g' \
              -e 's/)/\\)/g' \
              -e 's/~/\\~/g' \
              -e 's/`/\\`/g' \
              -e 's/>/\\>/g' \
              -e 's/#/\\#/g' \
              -e 's/\+/\\+/g' \
              -e 's/-/\\-/g' \
              -e 's/=/\\=/g' \
              -e 's/|/\\|/g' \
              -e 's/{/\\{/g' \
              -e 's/}/\\}/g' \
              -e 's/\./\\./g' \
              -e 's/!/\\!/g'
          }

          EVENT_NAME="${{ github.event_name }}"
          ACTION="${{ github.event.action }}"
          ACTOR="${{ github.actor }}"
          REPO="${{ github.repository }}"
          SAFE_ACTOR=$(escape_md2 "$ACTOR")
          SAFE_REPO=$(escape_md2 "$REPO")
          SAFE_ACTION=$(escape_md2 "$ACTION")
          SAFE_EVENT_NAME=$(escape_md2 "$EVENT_NAME")
          EVENT_URL="https://github.com/${REPO}"

          MSG="üöÄ *GitHub Action Report*"$'\n'
          MSG+="*Event:* ${SAFE_EVENT_NAME}"$'\n'
          MSG+="*Action:* ${SAFE_ACTION}"$'\n'
          MSG+="*Repo:* ${SAFE_REPO}"$'\n'
          MSG+="*By:* ${SAFE_ACTOR}"$'\n'

          # Push
          if [ "$EVENT_NAME" = "push" ]; then
            COMMIT_MSG_RAW="${{ github.event.head_commit.message }}"
            COMMIT_AUTHOR_RAW="${{ github.event.head_commit.author.name }}"
            FILES_ADDED_RAW="${{ toJson(github.event.head_commit.added) }}"
            FILES_MODIFIED_RAW="${{ toJson(github.event.head_commit.modified) }}"
            FILES_REMOVED_RAW="${{ toJson(github.event.head_commit.removed) }}"
            EVENT_URL="${{ github.event.head_commit.url }}"
            SAFE_COMMIT_MSG=$(escape_md2 "$COMMIT_MSG_RAW")
            SAFE_COMMIT_AUTHOR=$(escape_md2 "$COMMIT_AUTHOR_RAW")
            list_files() {
              if [ -z "$1" ] || [ "$1" = "[]" ]; then
                echo "None"
              else
                echo "$1" | jq -r '.[]' | while read -r line; do
                  echo "- $(escape_md2 "$line")"
                done
              fi
            }
            FILES_ADDED=$(list_files "$FILES_ADDED_RAW")
            FILES_MODIFIED=$(list_files "$FILES_MODIFIED_RAW")
            FILES_REMOVED=$(list_files "$FILES_REMOVED_RAW")
            MSG+="*Commit message:* ${SAFE_COMMIT_MSG}"$'\n'
            MSG+="*Author:* ${SAFE_COMMIT_AUTHOR}"$'\n'
            MSG+="*Added files:*${FILES_ADDED}"$'\n'
            MSG+="*Modified files:*${FILES_MODIFIED}"$'\n'
            MSG+="*Removed files:*${FILES_REMOVED}"$'\n'
          fi

          # Issues
          if [[ "$EVENT_NAME" == "issues" ]]; then
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_BODY="${{ github.event.issue.body }}"
            ISSUE_URL="${{ github.event.issue.html_url }}"
            SAFE_ISSUE_TITLE=$(escape_md2 "$ISSUE_TITLE")
            SAFE_ISSUE_BODY=$(escape_md2 "$ISSUE_BODY")
            MSG+="*Issue Title:* ${SAFE_ISSUE_TITLE}"$'\n'
            MSG+="*Issue Body:*${SAFE_ISSUE_BODY}"$'\n'
            EVENT_URL="$ISSUE_URL"
          fi

          # Issue Comment
          if [[ "$EVENT_NAME" == "issue_comment" ]]; then
            ISSUE_TITLE="${{ github.event.issue.title }}"
            COMMENT_BODY="${{ github.event.comment.body }}"
            COMMENT_AUTHOR="${{ github.event.comment.user.login }}"
            COMMENT_URL="${{ github.event.comment.html_url }}"
            SAFE_ISSUE_TITLE=$(escape_md2 "$ISSUE_TITLE")
            SAFE_COMMENT_BODY=$(escape_md2 "$COMMENT_BODY")
            SAFE_COMMENT_AUTHOR=$(escape_md2 "$COMMENT_AUTHOR")
            MSG+="*Issue Title:* ${SAFE_ISSUE_TITLE}"$'\n'
            MSG+="*Comment Author:* ${SAFE_COMMENT_AUTHOR}"$'\n'
            MSG+="*Comment:*${SAFE_COMMENT_BODY}"$'\n'
            EVENT_URL="$COMMENT_URL"
          fi

          # Pull Request
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_BODY="${{ github.event.pull_request.body }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_STATE="${{ github.event.pull_request.state }}"
            SAFE_PR_TITLE=$(escape_md2 "$PR_TITLE")
            SAFE_PR_BODY=$(escape_md2 "$PR_BODY")
            SAFE_PR_STATE=$(escape_md2 "$PR_STATE")
            MSG+="*Pull Request Title:* ${SAFE_PR_TITLE}"$'\n'
            MSG+="*PR State:* ${SAFE_PR_STATE}"$'\n'
            MSG+="*PR Body:*${SAFE_PR_BODY}"$'\n'
            EVENT_URL="$PR_URL"
          fi

          # Release
          if [[ "$EVENT_NAME" == "release" ]]; then
            REL_NAME="${{ github.event.release.name }}"
            REL_TAG="${{ github.event.release.tag_name }}"
            REL_BODY="${{ github.event.release.body }}"
            REL_URL="${{ github.event.release.html_url }}"
            SAFE_REL_NAME=$(escape_md2 "$REL_NAME")
            SAFE_REL_TAG=$(escape_md2 "$REL_TAG")
            SAFE_REL_BODY=$(escape_md2 "$REL_BODY")
            MSG+="*Release Name:* ${SAFE_REL_NAME}"$'\n'
            MSG+="*Release Tag:* ${SAFE_REL_TAG}"$'\n'
            MSG+="*Release Notes:*${SAFE_REL_BODY}"$'\n'
            EVENT_URL="$REL_URL"
          fi

          # Create & Delete (branch/tag/repo)
          if [[ "$EVENT_NAME" == "create" ]]; then
            REF_TYPE="${{ github.event.ref_type }}"
            REF="${{ github.event.ref }}"
            SAFE_REF_TYPE=$(escape_md2 "$REF_TYPE")
            SAFE_REF=$(escape_md2 "$REF")
            MSG+="*Created ${SAFE_REF_TYPE}:* ${SAFE_REF}"$'\n'
          fi
          if [[ "$EVENT_NAME" == "delete" ]]; then
            REF_TYPE="${{ github.event.ref_type }}"
            REF="${{ github.event.ref }}"
            SAFE_REF_TYPE=$(escape_md2 "$REF_TYPE")
            SAFE_REF=$(escape_md2 "$REF")
            MSG+="*Deleted ${SAFE_REF_TYPE}:* ${SAFE_REF}"$'\n'
          fi

          # Discussion Comment
          if [[ "$EVENT_NAME" == "discussion_comment" ]]; then
            DISC_TITLE="${{ github.event.discussion.title }}"
            DISC_BODY="${{ github.event.discussion.body }}"
            COMMENT_BODY="${{ github.event.comment.body }}"
            SAFE_DISC_TITLE=$(escape_md2 "$DISC_TITLE")
            SAFE_DISC_BODY=$(escape_md2 "$DISC_BODY")
            SAFE_COMMENT_BODY=$(escape_md2 "$COMMENT_BODY")
            MSG+="*Discussion Title:* ${SAFE_DISC_TITLE}"$'\n'
            MSG+="*Discussion Body:*${SAFE_DISC_BODY}"$'\n'
            MSG+="*Comment:*${SAFE_COMMENT_BODY}"$'\n'
          fi

          # Repository Dispatch
          if [[ "$EVENT_NAME" == "repository_dispatch" ]]; then
            MSG+="Repository dispatch event triggered."$'\n'
          fi

          # Workflow Dispatch
          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            MSG+="Workflow dispatch event triggered."$'\n'
          fi

          # Fork
          if [[ "$EVENT_NAME" == "fork" ]]; then
            FORKED_FROM="${{ github.event.forkee.full_name }}"
            FORKED_URL="${{ github.event.forkee.html_url }}"
            SAFE_FORKED_FROM=$(escape_md2 "$FORKED_FROM")
            MSG+="*Repo forked from:* ${SAFE_FORKED_FROM}"$'\n'
            EVENT_URL="$FORKED_URL"
          fi

          # Watch (star)
          if [[ "$EVENT_NAME" == "watch" ]]; then
            MSG+="Repository starred!"$'\n'
          fi

          MSG+=$'\n'"[üîó View on GitHub](${EVENT_URL})"

          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            --data-urlencode text="$MSG" \
            -d parse_mode=MarkdownV2 \
            -d disable_web_page_preview=true)

          echo "Telegram response: $RESPONSE"
          if echo "$RESPONSE" | grep -q '"ok":false'; then
            echo "‚ùå Telegram API error detected, failing the job."
            exit 1
          fi